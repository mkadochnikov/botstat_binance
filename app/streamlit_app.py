import streamlit as st
import pandas as pd
import requests
import time
import datetime
import csv
import io
import os
import sys
import json
from typing import List, Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="Binance Futures ATR Monitor (WebSocket)",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
API_BASE_URL = "http://localhost:8008"  # URL FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8008
TIMEFRAMES = ["1m", "3m", "5m", "15m", "1h"]
REFRESH_INTERVAL = 30  # —Å–µ–∫—É–Ω–¥—ã
ATR_THRESHOLD = 0.15  # –ø–æ—Ä–æ–≥ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è "–≥–æ—Ä—è—á–∏—Ö" –∑–Ω–∞—á–µ–Ω–∏–π

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API
def get_symbols() -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    try:
        response = requests.get(f"{API_BASE_URL}/symbols")
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤: {str(e)}")
        return []

def get_all_symbols_atr(limit: Optional[int] = None) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ATR –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        all_symbols = get_symbols()
        total_symbols = len(all_symbols)
        
        if total_symbols == 0:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤")
            return []
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_text = "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤..."
        progress_bar = st.progress(0, text=progress_text)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        status_container = st.empty()
        
        # URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        url = f"{API_BASE_URL}/all_symbols_atr"
        if limit is not None:
            url += f"?limit={limit}"
            total_symbols = min(total_symbols, limit)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        response = requests.get(url, stream=True)
        response.raise_for_status()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        data = []
        loaded_symbols = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        for line in response.iter_lines():
            if line:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –¥–∞–Ω–Ω—ã–µ
                item = json.loads(line.decode('utf-8'))
                data.append(item)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                loaded_symbols += 1
                progress = min(loaded_symbols / total_symbols, 1.0)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
                progress_bar.progress(progress, text=f"{progress_text} ({loaded_symbols}/{total_symbols})")
                status_container.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {loaded_symbols} –∏–∑ {total_symbols} ({int(progress * 100)}%)")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                time.sleep(0.01)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –æ—á–∏—â–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
        progress_bar.progress(1.0, text="–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        time.sleep(1)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É
        progress_bar.empty()
        status_container.empty()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        st.toast(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_symbols} —Å–∏–º–≤–æ–ª–æ–≤.", icon="‚úÖ")
        
        return data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö ATR: {str(e)}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö ATR
def create_atr_dataframe(atr_data: List[Dict[str, Any]]) -> pd.DataFrame:
    """–°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö ATR –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    rows = []
    
    for item in atr_data:
        row = {
            "–°–∏–º–≤–æ–ª": item["symbol"],
            "–¶–µ–Ω–∞": round(item["price"], 4)
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è ATR% –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        for timeframe in TIMEFRAMES:
            if timeframe in item["timeframes"]:
                row[f"ATR {timeframe} (%)"] = item["timeframes"][timeframe]["atr_percent"]
                row[f"HOT {timeframe}"] = item["timeframes"][timeframe]["is_hot"]
            else:
                row[f"ATR {timeframe} (%)"] = 0.0
                row[f"HOT {timeframe}"] = False
        
        rows.append(row)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(rows)
    return df

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def apply_conditional_formatting(df: pd.DataFrame) -> pd.DataFrame.style:
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫ DataFrame"""
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å
    style = df.style
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ —è—á–µ–π–∫–∏
    def highlight_atr(val, column):
        if "ATR" in column and isinstance(val, (int, float)):
            if val >= ATR_THRESHOLD:
                return 'background-color: #c6efce'  # –∑–µ–ª–µ–Ω—ã–π
            else:
                return 'background-color: #ffc7ce'  # –∫—Ä–∞—Å–Ω—ã–π
        return ''
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–µ
    for col in df.columns:
        if "ATR" in col:
            style = style.applymap(lambda x: highlight_atr(x, col), subset=[col])
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    for col in df.columns:
        if "ATR" in col:
            style = style.format({col: "{:.2f}"})
        elif col == "–¶–µ–Ω–∞":
            style = style.format({col: "{:.4f}"})
    
    return style

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ CSV
def export_to_csv(df: pd.DataFrame) -> str:
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª"""
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"binance_atr_{timestamp}.csv"
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é DataFrame –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_df = df.copy()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å —Ü–≤–µ—Ç–æ–≤—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
    for timeframe in TIMEFRAMES:
        col_name = f"ATR {timeframe} (%)"
        if col_name in export_df.columns:
            export_df[f"–ú–µ—Ç–∫–∞ {timeframe}"] = export_df.apply(
                lambda row: "HOT" if row[col_name] >= ATR_THRESHOLD else "OK", 
                axis=1
            )
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –≤ CSV
    csv_buffer = io.StringIO()
    export_df.to_csv(csv_buffer, index=False)
    
    return csv_buffer.getvalue(), filename

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title("üìä Binance Futures ATR Monitor (WebSocket)")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ WebSocket
    st.info("–≠—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è WebSocket API Binance –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –±–∞–Ω–æ–≤.")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –û–ø—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        show_all_symbols = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", value=True)
        
        # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ)
        symbols_limit = None
        if not show_all_symbols:
            symbols_limit = st.slider(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤", 
                min_value=5, 
                max_value=100, 
                value=30, 
                step=5
            )
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            st.session_state.last_update = time.time()
            st.session_state.force_refresh = True
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if 'last_update' not in st.session_state:
        st.session_state.last_update = 0
    if 'force_refresh' not in st.session_state:
        st.session_state.force_refresh = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    current_time = time.time()
    time_since_update = current_time - st.session_state.last_update
    
    if time_since_update > REFRESH_INTERVAL or st.session_state.force_refresh:
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if show_all_symbols:
            st.warning("–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ ATR —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        atr_data = get_all_symbols_atr(symbols_limit)
            
        if atr_data:
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = create_atr_dataframe(atr_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
            st.session_state.df = df
            st.session_state.last_update = current_time
            st.session_state.force_refresh = False
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    last_update_time = datetime.datetime.fromtimestamp(st.session_state.last_update).strftime("%Y-%m-%d %H:%M:%S")
    st.info(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update_time}")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if 'df' in st.session_state and not st.session_state.df.empty:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        st.success(f"–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è {len(st.session_state.df)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        styled_df = apply_conditional_formatting(st.session_state.df)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(styled_df, use_container_width=True)
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV
        if st.button("Export to CSV"):
            csv_data, filename = export_to_csv(st.session_state.df)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å CSV",
                data=csv_data,
                file_name=filename,
                mime="text/csv"
            )
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'.")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä–æ–≥–æ–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏
    st.markdown(f"""
    ### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–≤–µ—Ç–æ–≤–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∫–µ:
    - üü¢ **–ó–µ–ª–µ–Ω—ã–π**: ATR% ‚â• {ATR_THRESHOLD}% (HOT)
    - üî¥ **–ö—Ä–∞—Å–Ω—ã–π**: ATR% < {ATR_THRESHOLD}% (OK)
    """)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ WebSocket
    st.markdown("""
    ### –û WebSocket API
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç WebSocket API Binance –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
    - –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    - –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –ø—Ä–æ–∫—Å–∏
    - –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    - –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è —Ä–∞–±–æ—Ç–∞ –∏ –º–µ–Ω—å—à–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ç—å
    """)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    main()
