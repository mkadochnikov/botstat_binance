import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import requests
import time
import datetime
import os
import sys
import json
from typing import List, Dict, Any, Optional, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(ttl=60)
def get_top_coins(limit=20):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–ø-–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö —Å CoinGecko
    """
    try:
        url = "https://api.coingecko.com/api/v3/coins/markets"
        params = {
            'vs_currency': 'usd',
            'order': 'market_cap_desc',
            'per_page': limit,
            'page': 1,
            'sparkline': False,
            'price_change_percentage': '24h'
        }
        response = requests.get(url, params=params)
        response.raise_for_status()
        return pd.DataFrame(response.json())
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–ø-–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö: {str(e)}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return pd.DataFrame({
            'symbol': ['BTC', 'ETH', 'USDT', 'BNB', 'SOL', 'XRP', 'USDC', 'ADA', 'AVAX', 'DOGE',
                      'DOT', 'MATIC', 'SHIB', 'TRX', 'TON', 'LINK', 'UNI', 'ATOM', 'LTC', 'BCH'],
            'current_price': [50000, 3000, 1, 400, 100, 0.5, 1, 0.4, 30, 0.1, 
                             15, 0.8, 0.00001, 0.1, 2, 15, 8, 10, 80, 300],
            'price_change_percentage_24h': [2.5, 1.8, 0.1, -1.2, 5.6, -2.3, 0.0, 3.2, -4.1, 1.5,
                                           -0.8, 2.1, 4.5, -1.7, 3.3, 0.9, -2.8, 1.1, -0.5, 2.2],
            'total_volume': [30000000000, 15000000000, 80000000000, 2000000000, 1500000000, 
                            1000000000, 900000000, 800000000, 700000000, 600000000,
                            500000000, 450000000, 400000000, 350000000, 300000000,
                            250000000, 200000000, 150000000, 100000000, 50000000],
            'market_cap': [900000000000, 350000000000, 80000000000, 60000000000, 40000000000,
                          30000000000, 25000000000, 15000000000, 10000000000, 8000000000,
                          7000000000, 6000000000, 5000000000, 4000000000, 3000000000,
                          2500000000, 2000000000, 1500000000, 1000000000, 500000000],
            'name': ['Bitcoin', 'Ethereum', 'Tether', 'Binance Coin', 'Solana', 'Ripple', 
                    'USD Coin', 'Cardano', 'Avalanche', 'Dogecoin', 'Polkadot', 'Polygon',
                    'Shiba Inu', 'Tron', 'Toncoin', 'Chainlink', 'Uniswap', 'Cosmos', 
                    'Litecoin', 'Bitcoin Cash'],
            'image': [''] * 20
        })

@st.cache_data(ttl=60)
def get_market_global_data():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å CoinGecko
    """
    try:
        url = "https://api.coingecko.com/api/v3/global"
        response = requests.get(url)
        response.raise_for_status()
        return response.json()['data']
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            'total_market_cap': {'usd': 2000000000000},
            'total_volume': {'usd': 100000000000},
            'market_cap_percentage': {'btc': 60.79, 'eth': 18.2},
            'market_cap_change_percentage_24h_usd': -1.45
        }

@st.cache_data(ttl=60)
def get_fear_greed_index():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ —Å Alternative.me
    """
    try:
        url = "https://api.alternative.me/fng/"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        return {
            'value': int(data['data'][0]['value']),
            'value_classification': data['data'][0]['value_classification'],
            'timestamp': data['data'][0]['timestamp']
        }
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {str(e)}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            'value': 74,
            'value_classification': 'Greed',
            'timestamp': int(time.time())
        }

@st.cache_data(ttl=60)
def get_historical_market_cap():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä—ã–Ω–∫–∞
    """
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        end_date = datetime.datetime.now()
        dates = [end_date - datetime.timedelta(days=x) for x in range(30)]
        dates.reverse()
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
        base_cap = 2000000000000
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ç—Ä–µ–Ω–¥–æ–º —Ä–æ—Å—Ç–∞
        caps = []
        for i in range(30):
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ —Ä–æ—Å—Ç–∞ –∏ —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
            trend_factor = 1 + (i * 0.01)  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞ 1% –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
            random_factor = np.random.normal(1, 0.02)  # –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è ¬±2%
            cap = base_cap * trend_factor * random_factor
            caps.append(cap)
        
        return {
            'dates': dates,
            'caps': caps
        }
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        end_date = datetime.datetime.now()
        dates = [end_date - datetime.timedelta(days=x) for x in range(30)]
        dates.reverse()
        caps = [2000000000000 * (1 + (i * 0.01)) for i in range(30)]
        return {
            'dates': dates,
            'caps': caps
        }

def render_home_page():
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–∞—à–±–æ—Ä–¥–∞
    """
    st.title("üè† Ultimate Crypto Analytics")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤–µ—Ä—Å—Ç–∫–∏ —Å –Ω–æ–≤—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º
    col1, col2 = st.columns([0.67, 0.33])
    
    with col1:
        # –ö—Ä–∏–ø—Ç–æ–ø—É–∑—ã—Ä–∏ (Bubble Chart) –≤–º–µ—Å—Ç–æ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        st.subheader("üîÆ –ö—Ä–∏–ø—Ç–æ–ø—É–∑—ã—Ä–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø-20 –º–æ–Ω–µ—Ç–∞—Ö
        df = get_top_coins(limit=20)
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        bubble_df = df[['symbol', 'name', 'current_price', 'price_change_percentage_24h', 'market_cap', 'total_volume']]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –ø—É–∑—ã—Ä–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        colors = []
        for change in bubble_df['price_change_percentage_24h']:
            if change >= 3:
                colors.append('#00FF00')  # –Ø—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è —Å–∏–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
            elif change > 0:
                colors.append('#90EE90')  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è —É–º–µ—Ä–µ–Ω–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
            elif change > -3:
                colors.append('#FFA07A')  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π –¥–ª—è —É–º–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è
            else:
                colors.append('#FF0000')  # –Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å–∏–ª—å–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è
        
        bubble_df['color'] = colors
        
        # –°–æ–∑–¥–∞–µ–º –ø—É–∑—ã—Ä—å–∫–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å –ø–æ–º–æ—â—å—é Plotly
        fig = px.scatter(
            bubble_df,
            x='total_volume',
            y='price_change_percentage_24h',
            size='market_cap',
            color='symbol',
            hover_name='name',
            text='symbol',
            size_max=60,
            title="–ö—Ä–∏–ø—Ç–æ–ø—É–∑—ã—Ä–∏: —Ä–∞–∑–º–µ—Ä = –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è, –ø–æ–ª–æ–∂–µ–Ω–∏–µ = –æ–±—ä–µ–º –∏ % –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
        fig.update_traces(
            textposition='top center',
            marker=dict(
                sizemode='area',
                sizeref=2.*max(bubble_df['market_cap'])/(60.**2),
                line=dict(width=2, color='DarkSlateGrey')
            )
        )
        
        fig.update_layout(
            height=600,
            xaxis=dict(
                title="–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24—á (USD)",
                type='log',
                showgrid=True
            ),
            yaxis=dict(
                title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 24—á (%)",
                showgrid=True
            ),
            showlegend=False
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        st.plotly_chart(fig, use_container_width=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –¥–∏–∞–≥—Ä–∞–º–º–µ
        st.markdown("""
        **–ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –¥–∏–∞–≥—Ä–∞–º–º–µ:**
        - **–†–∞–∑–º–µ—Ä –ø—É–∑—ã—Ä—è**: –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è (Market Cap)
        - **–ü–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ X**: –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24—á (Volume)
        - **–ü–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ Y**: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 24—á (%)
        - **–¶–≤–µ—Ç**: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–¥ –¥–∏–∞–≥—Ä–∞–º–º–æ–π –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            st.dataframe(
                bubble_df[['symbol', 'name', 'current_price', 'price_change_percentage_24h', 'market_cap', 'total_volume']].rename(
                    columns={
                        'symbol': '–°–∏–º–≤–æ–ª',
                        'name': '–ù–∞–∑–≤–∞–Ω–∏–µ',
                        'current_price': '–¶–µ–Ω–∞ (USD)',
                        'price_change_percentage_24h': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á (%)',
                        'market_cap': '–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è (USD)',
                        'total_volume': '–û–±—ä–µ–º –∑–∞ 24—á (USD)'
                    }
                ).style.format({
                    '–¶–µ–Ω–∞ (USD)': '${:.2f}',
                    '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á (%)': '{:.2f}%',
                    '–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è (USD)': '${:,.0f}',
                    '–û–±—ä–µ–º –∑–∞ 24—á (USD)': '${:,.0f}'
                }),
                use_container_width=True
            )
    
    with col2:
        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫
        
        # ‚ùπ Fear & Greed Index —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Streamlit
        st.subheader("üò± Fear & Greed Index")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        fear_greed = get_fear_greed_index()
        fear_value = fear_greed['value']
        fear_label = fear_greed['value_classification']
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫—É
        st.metric(
            label=f"Fear & Greed Index ({fear_label})",
            value=fear_value,
            delta=None
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å –ø–æ–º–æ—â—å—é Streamlit
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ –º–µ—Ç–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
        if fear_value <= 25:
            fear_color = "red"
            fear_text = "Extreme Fear"
        elif fear_value <= 45:
            fear_color = "orange"
            fear_text = "Fear"
        elif fear_value <= 55:
            fear_color = "yellow"
            fear_text = "Neutral"
        elif fear_value <= 75:
            fear_color = "lightgreen"
            fear_text = "Greed"
        else:
            fear_color = "green"
            fear_text = "Extreme Greed"
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        st.progress(fear_value/100, text=f"{fear_value} - {fear_text}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —à–∫–∞–ª—É –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        cols = st.columns(5)
        with cols[0]:
            st.markdown(f'<div style="background-color:red;height:10px;border-radius:3px;"></div>', unsafe_allow_html=True)
            st.markdown('<div style="text-align:center;font-size:10px;">0-25</div>', unsafe_allow_html=True)
        with cols[1]:
            st.markdown(f'<div style="background-color:orange;height:10px;border-radius:3px;"></div>', unsafe_allow_html=True)
            st.markdown('<div style="text-align:center;font-size:10px;">26-45</div>', unsafe_allow_html=True)
        with cols[2]:
            st.markdown(f'<div style="background-color:yellow;height:10px;border-radius:3px;"></div>', unsafe_allow_html=True)
            st.markdown('<div style="text-align:center;font-size:10px;">46-55</div>', unsafe_allow_html=True)
        with cols[3]:
            st.markdown(f'<div style="background-color:lightgreen;height:10px;border-radius:3px;"></div>', unsafe_allow_html=True)
            st.markdown('<div style="text-align:center;font-size:10px;">56-75</div>', unsafe_allow_html=True)
        with cols[4]:
            st.markdown(f'<div style="background-color:green;height:10px;border-radius:3px;"></div>', unsafe_allow_html=True)
            st.markdown('<div style="text-align:center;font-size:10px;">76-100</div>', unsafe_allow_html=True)
        
        # ‚ù∫ –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ BTC —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Streamlit
        st.subheader("üèÜ –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ BTC")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        global_data = get_market_global_data()
        btc_dominance = global_data['market_cap_percentage']['btc']
        eth_dominance = global_data['market_cap_percentage']['eth']
        other_dominance = 100 - btc_dominance - eth_dominance
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫—É
        st.metric(
            label="–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ BTC",
            value=f"{btc_dominance:.2f}%",
            delta=f"{global_data['market_cap_change_percentage_24h_usd']:.2f}%"
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        dominance_data = pd.DataFrame({
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': ['Bitcoin', 'Ethereum', '–î—Ä—É–≥–∏–µ'],
            '–ü—Ä–æ—Ü–µ–Ω—Ç': [btc_dominance, eth_dominance, other_dominance]
        })
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å –ø–æ–º–æ—â—å—é Streamlit
        st.bar_chart(
            dominance_data,
            x='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            y='–ü—Ä–æ—Ü–µ–Ω—Ç',
            use_container_width=True
        )
        
        # ‚ùª –û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Streamlit
        st.subheader("üí∞ –û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è")
        
        total_market_cap = global_data['total_market_cap']['usd']
        total_volume = global_data['total_volume']['usd']
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫—É
        st.metric(
            label="–û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è",
            value=f"${total_market_cap / 1e12:.2f}T",
            delta=f"Vol: ${total_volume / 1e9:.2f}B"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        historical_data = get_historical_market_cap()
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        cap_df = pd.DataFrame({
            '–î–∞—Ç–∞': historical_data['dates'],
            '–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è': historical_data['caps']
        })
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º st.line_chart –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        st.line_chart(
            cap_df,
            x='–î–∞—Ç–∞',
            y='–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è',
            use_container_width=True
        )
